---
import { t, changeLanguage } from "i18next";
import CalendarEntry from '../components/CalendarEntry.astro';
import CalendarEntryForm from "../components/CalendarEntryForm.astro";
import Layout from '../layouts/Layout.astro';
// import Card from '../components/Card.astro';
// import { ICalendarEntry } from '../lib/interfaces/calendar';

interface ICalendarEntry {
  id: string
  date: string // date
  time: string // hh:mm
  location: string
  title: string
}

const loadData = async () => {
	const rawData = await fetch(`https://raw.githubusercontent.com/letier3110/dubaiclub/main/src/data/calendar.json`)
	if(!rawData) return;
	const textData = await rawData.text();
	try {
		const jsonData = JSON.parse(textData);
		// console.log(jsonData);
		data = jsonData;
		// console.log('jsonData', jsonData	)
	} catch (e) {
		// console.log(e)
	}
	// console.log();
	// const contentData = jsonData.content;
	// console.log(jsonData.content);
	// var jsonString = Crypto.charenc.UTF8.bytesToString(Crypto.util.base64ToBytes(bytes));
	// return jsonString.evalJSON();
	// console.log(atob(contentData));
}

let data: Array<ICalendarEntry> = [];
loadData();
// console.log('data', data)
---

<Layout title="Welcome to Astro.">
	<main>
		<h1>Admin <span class="text-gradient">DOC</span></h1>
		<!-- <p class="instructions">
			To get started, open the directory <code>src/pages</code> in your project.<br />
			<strong>Code Challenge:</strong> Tweak the "Welcome to Astro" message above.
		</p> -->
		<CalendarEntryForm />
		{data.length === 0 && <h2>{t("home.noItems")}</h2>}
		{data.map((event) => (
			<CalendarEntry event={event} />
		))}
		<!-- <h5>{t("home.calendarOld")}</h5>
		{data.filter(x => Date.now() >= new Date(x.date).getTime()).map((event) => (
			<CalendarEntry event={event} />
		))} -->
	</main>
</Layout>

<style>
	main {
		margin: auto;
		padding: 1.5rem;
		max-width: 60ch;
	}
	h1 {
		font-size: 3rem;
		font-weight: 800;
		margin: 0;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		line-height: 1.6;
		margin: 1rem 0;
		border: 1px solid rgba(var(--accent), 25%);
		background-color: white;
		padding: 1rem;
		border-radius: 0.4rem;
	}
	.instructions code {
		font-size: 0.875em;
		font-weight: bold;
		background: rgba(var(--accent), 12%);
		color: rgb(var(--accent));
		border-radius: 4px;
		padding: 0.3em 0.45em;
	}
	.instructions strong {
		color: rgb(var(--accent));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}
</style>
